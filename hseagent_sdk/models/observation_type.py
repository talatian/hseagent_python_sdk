# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from hseagent_sdk.models.examination_type import ExaminationType
from hseagent_sdk.models.observation_category import ObservationCategory
from hseagent_sdk.models.observation_type_value_type import ObservationTypeValueType
from hseagent_sdk.models.section import Section
from typing import Optional, Set
from typing_extensions import Self

class ObservationType(BaseModel):
    """
    ObservationType
    """ # noqa: E501
    id: StrictInt
    sections: List[Section]
    name: Annotated[str, Field(strict=True, max_length=255)]
    description: Optional[StrictStr] = None
    code: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    required: Optional[StrictBool] = None
    var_schema: Optional[Any] = Field(default=None, alias="schema")
    value_type: Optional[ObservationTypeValueType] = None
    category: ObservationCategory
    unit: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    hint: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    examination_types: List[ExaminationType]
    __properties: ClassVar[List[str]] = ["id", "sections", "name", "description", "code", "required", "schema", "value_type", "category", "unit", "hint", "examination_types"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ObservationType from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "sections",
            "category",
            "examination_types",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in sections (list)
        _items = []
        if self.sections:
            for _item_sections in self.sections:
                if _item_sections:
                    _items.append(_item_sections.to_dict())
            _dict['sections'] = _items
        # override the default output from pydantic by calling `to_dict()` of value_type
        if self.value_type:
            _dict['value_type'] = self.value_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of category
        if self.category:
            _dict['category'] = self.category.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in examination_types (list)
        _items = []
        if self.examination_types:
            for _item_examination_types in self.examination_types:
                if _item_examination_types:
                    _items.append(_item_examination_types.to_dict())
            _dict['examination_types'] = _items
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if code (nullable) is None
        # and model_fields_set contains the field
        if self.code is None and "code" in self.model_fields_set:
            _dict['code'] = None

        # set to None if var_schema (nullable) is None
        # and model_fields_set contains the field
        if self.var_schema is None and "var_schema" in self.model_fields_set:
            _dict['schema'] = None

        # set to None if value_type (nullable) is None
        # and model_fields_set contains the field
        if self.value_type is None and "value_type" in self.model_fields_set:
            _dict['value_type'] = None

        # set to None if unit (nullable) is None
        # and model_fields_set contains the field
        if self.unit is None and "unit" in self.model_fields_set:
            _dict['unit'] = None

        # set to None if hint (nullable) is None
        # and model_fields_set contains the field
        if self.hint is None and "hint" in self.model_fields_set:
            _dict['hint'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ObservationType from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "sections": [Section.from_dict(_item) for _item in obj["sections"]] if obj.get("sections") is not None else None,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "code": obj.get("code"),
            "required": obj.get("required"),
            "schema": obj.get("schema"),
            "value_type": ObservationTypeValueType.from_dict(obj["value_type"]) if obj.get("value_type") is not None else None,
            "category": ObservationCategory.from_dict(obj["category"]) if obj.get("category") is not None else None,
            "unit": obj.get("unit"),
            "hint": obj.get("hint"),
            "examination_types": [ExaminationType.from_dict(_item) for _item in obj["examination_types"]] if obj.get("examination_types") is not None else None
        })
        return _obj


