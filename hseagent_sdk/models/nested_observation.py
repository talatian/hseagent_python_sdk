# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hseagent_sdk.models.observation_type import ObservationType
from typing import Optional, Set
from typing_extensions import Self

class NestedObservation(BaseModel):
    """
    NestedObservation
    """ # noqa: E501
    observation_type: ObservationType
    observation_type_id: StrictInt
    value: StrictStr
    note: Optional[StrictStr] = None
    based_on_observation_id: Optional[StrictInt] = None
    based_on_examination_id: Optional[StrictInt] = None
    created_at: datetime
    updated_at: datetime
    __properties: ClassVar[List[str]] = ["observation_type", "observation_type_id", "value", "note", "based_on_observation_id", "based_on_examination_id", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of NestedObservation from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "observation_type",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of observation_type
        if self.observation_type:
            _dict['observation_type'] = self.observation_type.to_dict()
        # set to None if note (nullable) is None
        # and model_fields_set contains the field
        if self.note is None and "note" in self.model_fields_set:
            _dict['note'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of NestedObservation from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "observation_type": ObservationType.from_dict(obj["observation_type"]) if obj.get("observation_type") is not None else None,
            "observation_type_id": obj.get("observation_type_id"),
            "value": obj.get("value"),
            "note": obj.get("note"),
            "based_on_observation_id": obj.get("based_on_observation_id"),
            "based_on_examination_id": obj.get("based_on_examination_id"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


