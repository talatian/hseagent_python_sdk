# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from hseagent_sdk.models.action_ai_status_enum import ActionAIStatusEnum
from hseagent_sdk.models.examination import Examination
from hseagent_sdk.models.hse_report import HSEReport
from hseagent_sdk.models.observation_type import ObservationType
from typing import Optional, Set
from typing_extensions import Self

class ActionAI(BaseModel):
    """
    ActionAI
    """ # noqa: E501
    id: StrictInt
    action_type: ObservationType
    person: Optional[StrictInt] = None
    based_on_examination: Examination
    based_on_report: HSEReport
    data: Optional[Any] = None
    result: StrictStr
    based_on_examination_id: Optional[StrictInt] = None
    based_on_report_id: Optional[StrictInt] = None
    status: Optional[ActionAIStatusEnum] = None
    created_at: datetime
    updated_at: datetime
    target_observation: StrictStr
    target_examination: StrictStr
    __properties: ClassVar[List[str]] = ["id", "action_type", "person", "based_on_examination", "based_on_report", "data", "result", "based_on_examination_id", "based_on_report_id", "status", "created_at", "updated_at", "target_observation", "target_examination"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionAI from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "action_type",
            "based_on_examination",
            "based_on_report",
            "result",
            "created_at",
            "updated_at",
            "target_observation",
            "target_examination",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of action_type
        if self.action_type:
            _dict['action_type'] = self.action_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of based_on_examination
        if self.based_on_examination:
            _dict['based_on_examination'] = self.based_on_examination.to_dict()
        # override the default output from pydantic by calling `to_dict()` of based_on_report
        if self.based_on_report:
            _dict['based_on_report'] = self.based_on_report.to_dict()
        # set to None if person (nullable) is None
        # and model_fields_set contains the field
        if self.person is None and "person" in self.model_fields_set:
            _dict['person'] = None

        # set to None if data (nullable) is None
        # and model_fields_set contains the field
        if self.data is None and "data" in self.model_fields_set:
            _dict['data'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionAI from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "action_type": ObservationType.from_dict(obj["action_type"]) if obj.get("action_type") is not None else None,
            "person": obj.get("person"),
            "based_on_examination": Examination.from_dict(obj["based_on_examination"]) if obj.get("based_on_examination") is not None else None,
            "based_on_report": HSEReport.from_dict(obj["based_on_report"]) if obj.get("based_on_report") is not None else None,
            "data": obj.get("data"),
            "result": obj.get("result"),
            "based_on_examination_id": obj.get("based_on_examination_id"),
            "based_on_report_id": obj.get("based_on_report_id"),
            "status": obj.get("status"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "target_observation": obj.get("target_observation"),
            "target_examination": obj.get("target_examination")
        })
        return _obj


