# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.patched_physician_gender import PatchedPhysicianGender
from typing import Optional, Set
from typing_extensions import Self

class PatchedPhysician(BaseModel):
    """
    PatchedPhysician
    """ # noqa: E501
    id: Optional[StrictInt] = None
    first_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    last_name: Optional[Annotated[str, Field(strict=True, max_length=50)]] = None
    gender: Optional[PatchedPhysicianGender] = None
    national_code: Optional[Annotated[str, Field(strict=True, max_length=10)]] = None
    mobile: Optional[Annotated[str, Field(strict=True, max_length=15)]] = None
    email: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    medical_code: Optional[Annotated[str, Field(strict=True, max_length=20)]] = None
    specialty: Optional[Annotated[str, Field(strict=True, max_length=100)]] = None
    is_active: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    occupational_clinic: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "first_name", "last_name", "gender", "national_code", "mobile", "email", "medical_code", "specialty", "is_active", "created_at", "updated_at", "occupational_clinic"]

    @field_validator('mobile')
    def mobile_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(r"^(\+98|0)9\d{9}$", value):
            raise ValueError(r"must validate the regular expression /^(\+98|0)9\d{9}$/")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedPhysician from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gender
        if self.gender:
            _dict['gender'] = self.gender.to_dict()
        # set to None if gender (nullable) is None
        # and model_fields_set contains the field
        if self.gender is None and "gender" in self.model_fields_set:
            _dict['gender'] = None

        # set to None if national_code (nullable) is None
        # and model_fields_set contains the field
        if self.national_code is None and "national_code" in self.model_fields_set:
            _dict['national_code'] = None

        # set to None if mobile (nullable) is None
        # and model_fields_set contains the field
        if self.mobile is None and "mobile" in self.model_fields_set:
            _dict['mobile'] = None

        # set to None if email (nullable) is None
        # and model_fields_set contains the field
        if self.email is None and "email" in self.model_fields_set:
            _dict['email'] = None

        # set to None if medical_code (nullable) is None
        # and model_fields_set contains the field
        if self.medical_code is None and "medical_code" in self.model_fields_set:
            _dict['medical_code'] = None

        # set to None if specialty (nullable) is None
        # and model_fields_set contains the field
        if self.specialty is None and "specialty" in self.model_fields_set:
            _dict['specialty'] = None

        # set to None if created_at (nullable) is None
        # and model_fields_set contains the field
        if self.created_at is None and "created_at" in self.model_fields_set:
            _dict['created_at'] = None

        # set to None if updated_at (nullable) is None
        # and model_fields_set contains the field
        if self.updated_at is None and "updated_at" in self.model_fields_set:
            _dict['updated_at'] = None

        # set to None if occupational_clinic (nullable) is None
        # and model_fields_set contains the field
        if self.occupational_clinic is None and "occupational_clinic" in self.model_fields_set:
            _dict['occupational_clinic'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedPhysician from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "first_name": obj.get("first_name"),
            "last_name": obj.get("last_name"),
            "gender": PatchedPhysicianGender.from_dict(obj["gender"]) if obj.get("gender") is not None else None,
            "national_code": obj.get("national_code"),
            "mobile": obj.get("mobile"),
            "email": obj.get("email"),
            "medical_code": obj.get("medical_code"),
            "specialty": obj.get("specialty"),
            "is_active": obj.get("is_active"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "occupational_clinic": obj.get("occupational_clinic")
        })
        return _obj


