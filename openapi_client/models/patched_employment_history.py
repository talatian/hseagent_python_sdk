# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from openapi_client.models.branch import Branch
from openapi_client.models.process import Process
from typing import Optional, Set
from typing_extensions import Self

class PatchedEmploymentHistory(BaseModel):
    """
    PatchedEmploymentHistory
    """ # noqa: E501
    id: Optional[StrictInt] = None
    role: Optional[StrictStr] = None
    department: Optional[StrictStr] = None
    process: Optional[List[Process]] = None
    process_ids: Optional[List[StrictInt]] = None
    branch_id: Optional[StrictInt] = None
    branch: Optional[Branch] = None
    title: Optional[StrictStr] = None
    title_position: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    organization_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    organization_address: Optional[Annotated[str, Field(strict=True, max_length=255)]] = None
    assigned_task: Optional[StrictStr] = None
    employment_date_from: Optional[date] = None
    employment_date_to: Optional[date] = None
    reason_for_job_change: Optional[StrictStr] = None
    current: Optional[StrictBool] = None
    current_organization: Optional[StrictBool] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    person: Optional[StrictInt] = None
    __properties: ClassVar[List[str]] = ["id", "role", "department", "process", "process_ids", "branch_id", "branch", "title", "title_position", "organization_name", "organization_address", "assigned_task", "employment_date_from", "employment_date_to", "reason_for_job_change", "current", "current_organization", "created_at", "updated_at", "person"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PatchedEmploymentHistory from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "process",
            "branch",
            "title",
            "created_at",
            "updated_at",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in process (list)
        _items = []
        if self.process:
            for _item_process in self.process:
                if _item_process:
                    _items.append(_item_process.to_dict())
            _dict['process'] = _items
        # override the default output from pydantic by calling `to_dict()` of branch
        if self.branch:
            _dict['branch'] = self.branch.to_dict()
        # set to None if role (nullable) is None
        # and model_fields_set contains the field
        if self.role is None and "role" in self.model_fields_set:
            _dict['role'] = None

        # set to None if department (nullable) is None
        # and model_fields_set contains the field
        if self.department is None and "department" in self.model_fields_set:
            _dict['department'] = None

        # set to None if title_position (nullable) is None
        # and model_fields_set contains the field
        if self.title_position is None and "title_position" in self.model_fields_set:
            _dict['title_position'] = None

        # set to None if organization_name (nullable) is None
        # and model_fields_set contains the field
        if self.organization_name is None and "organization_name" in self.model_fields_set:
            _dict['organization_name'] = None

        # set to None if organization_address (nullable) is None
        # and model_fields_set contains the field
        if self.organization_address is None and "organization_address" in self.model_fields_set:
            _dict['organization_address'] = None

        # set to None if assigned_task (nullable) is None
        # and model_fields_set contains the field
        if self.assigned_task is None and "assigned_task" in self.model_fields_set:
            _dict['assigned_task'] = None

        # set to None if employment_date_to (nullable) is None
        # and model_fields_set contains the field
        if self.employment_date_to is None and "employment_date_to" in self.model_fields_set:
            _dict['employment_date_to'] = None

        # set to None if reason_for_job_change (nullable) is None
        # and model_fields_set contains the field
        if self.reason_for_job_change is None and "reason_for_job_change" in self.model_fields_set:
            _dict['reason_for_job_change'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PatchedEmploymentHistory from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "role": obj.get("role"),
            "department": obj.get("department"),
            "process": [Process.from_dict(_item) for _item in obj["process"]] if obj.get("process") is not None else None,
            "process_ids": obj.get("process_ids"),
            "branch_id": obj.get("branch_id"),
            "branch": Branch.from_dict(obj["branch"]) if obj.get("branch") is not None else None,
            "title": obj.get("title"),
            "title_position": obj.get("title_position"),
            "organization_name": obj.get("organization_name"),
            "organization_address": obj.get("organization_address"),
            "assigned_task": obj.get("assigned_task"),
            "employment_date_from": obj.get("employment_date_from"),
            "employment_date_to": obj.get("employment_date_to"),
            "reason_for_job_change": obj.get("reason_for_job_change"),
            "current": obj.get("current"),
            "current_organization": obj.get("current_organization"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "person": obj.get("person")
        })
        return _obj


