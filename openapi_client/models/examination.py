# coding: utf-8

"""
    My API

    Description of my API

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date, datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.examination_interpretation import ExaminationInterpretation
from openapi_client.models.examination_type import ExaminationType
from openapi_client.models.nested_observation import NestedObservation
from openapi_client.models.physician import Physician
from typing import Optional, Set
from typing_extensions import Self

class Examination(BaseModel):
    """
    Examination
    """ # noqa: E501
    id: StrictInt
    observations: List[NestedObservation]
    examination_type: ExaminationType
    examination_type_id: StrictInt
    person_id: StrictInt
    physician_id: Optional[StrictInt] = None
    physician: Physician
    note: Optional[StrictStr] = None
    interpretation: Optional[ExaminationInterpretation] = None
    performed_at: Optional[date] = None
    created_at: datetime
    updated_at: datetime
    actions: List[StrictInt]
    __properties: ClassVar[List[str]] = ["id", "observations", "examination_type", "examination_type_id", "person_id", "physician_id", "physician", "note", "interpretation", "performed_at", "created_at", "updated_at", "actions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Examination from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set([
            "id",
            "examination_type",
            "physician",
            "created_at",
            "updated_at",
            "actions",
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in observations (list)
        _items = []
        if self.observations:
            for _item_observations in self.observations:
                if _item_observations:
                    _items.append(_item_observations.to_dict())
            _dict['observations'] = _items
        # override the default output from pydantic by calling `to_dict()` of examination_type
        if self.examination_type:
            _dict['examination_type'] = self.examination_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of physician
        if self.physician:
            _dict['physician'] = self.physician.to_dict()
        # override the default output from pydantic by calling `to_dict()` of interpretation
        if self.interpretation:
            _dict['interpretation'] = self.interpretation.to_dict()
        # set to None if note (nullable) is None
        # and model_fields_set contains the field
        if self.note is None and "note" in self.model_fields_set:
            _dict['note'] = None

        # set to None if interpretation (nullable) is None
        # and model_fields_set contains the field
        if self.interpretation is None and "interpretation" in self.model_fields_set:
            _dict['interpretation'] = None

        # set to None if performed_at (nullable) is None
        # and model_fields_set contains the field
        if self.performed_at is None and "performed_at" in self.model_fields_set:
            _dict['performed_at'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Examination from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "observations": [NestedObservation.from_dict(_item) for _item in obj["observations"]] if obj.get("observations") is not None else None,
            "examination_type": ExaminationType.from_dict(obj["examination_type"]) if obj.get("examination_type") is not None else None,
            "examination_type_id": obj.get("examination_type_id"),
            "person_id": obj.get("person_id"),
            "physician_id": obj.get("physician_id"),
            "physician": Physician.from_dict(obj["physician"]) if obj.get("physician") is not None else None,
            "note": obj.get("note"),
            "interpretation": ExaminationInterpretation.from_dict(obj["interpretation"]) if obj.get("interpretation") is not None else None,
            "performed_at": obj.get("performed_at"),
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at"),
            "actions": obj.get("actions")
        })
        return _obj


